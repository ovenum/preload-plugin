{"version":3,"file":"index.modern.js","sources":["../src/util.ts","../src/index.ts","../src/queue.ts","../src/observer.ts"],"sourcesContent":["/**\n * Check if the user's connection is configured and fast enough\n * to preload data in the background.\n */\nexport function networkSupportsPreloading(): boolean {\n\tif (navigator.connection) {\n\t\tif (navigator.connection.saveData) {\n\t\t\treturn false;\n\t\t}\n\t\tif (navigator.connection.effectiveType?.endsWith('2g')) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\n/**\n * Does this device support true hover/pointer interactions?\n */\nexport function deviceSupportsHover() {\n\treturn window.matchMedia('(hover: hover)').matches;\n}\n\n/**\n * Safe requestIdleCallback function that falls back to setTimeout\n */\nexport const whenIdle = window.requestIdleCallback || ((cb) => setTimeout(cb, 1));\n","import Plugin from '@swup/plugin';\nimport { getCurrentUrl, Location } from 'swup';\nimport type {\n\tDelegateEvent,\n\tDelegateEventHandler,\n\tDelegateEventUnsubscribe,\n\tPageData,\n\tHookDefaultHandler\n} from 'swup';\nimport { deviceSupportsHover, networkSupportsPreloading, whenIdle } from './util.js';\nimport createQueue, { Queue } from './queue.js';\nimport createObserver, { Observer } from './observer.js';\n\ndeclare module 'swup' {\n\texport interface Swup {\n\t\t/**\n\t\t * Preload links by passing in either:\n\t\t * - a URL or an array of URLs\n\t\t * - a link element or an array of link elements\n\t\t */\n\t\tpreload?: SwupPreloadPlugin['preload'];\n\t\t/**\n\t\t * Preload any links on the current page manually marked for preloading.\n\t\t */\n\t\tpreloadLinks?: () => void;\n\t}\n\texport interface HookDefinitions {\n\t\t'link:hover': { el: HTMLAnchorElement; event: DelegateEvent };\n\t\t'page:preload': { page: PageData };\n\t}\n}\n\ntype VisibleLinkPreloadOptions = {\n\t/** Enable preloading of links entering the viewport */\n\tenabled: boolean;\n\t/** How much area of a link must be visible to preload it: 0 to 1.0 */\n\tthreshold: number;\n\t/** How long a link must be visible to preload it, in milliseconds */\n\tdelay: number;\n\t/** Containers to look for links in */\n\tcontainers: string[];\n\t/** Callback for opting out selected elements from preloading */\n\tignore: (el: HTMLAnchorElement) => boolean;\n};\n\nexport type PluginOptions = {\n\t/** The *concurrency limit* for simultaneous requests when preloading. */\n\tthrottle: number;\n\t/** Preload the initial page to allow instant back-button navigation. */\n\tpreloadInitialPage: boolean;\n\t/** Preload links when they are hovered, touched or focused. */\n\tpreloadHoveredLinks: boolean;\n\t/** Preload links when they enter the viewport. */\n\tpreloadVisibleLinks: VisibleLinkPreloadOptions;\n};\n\nexport type PluginInitOptions = Omit<PluginOptions, 'preloadVisibleLinks'> & {\n\t/** Preload links when they enter the viewport. */\n\tpreloadVisibleLinks: boolean | Partial<VisibleLinkPreloadOptions>;\n};\n\ntype PreloadOptions = {\n\t/** Priority of this preload: `true` for high, `false` for low. */\n\tpriority?: boolean;\n};\n\nexport default class SwupPreloadPlugin extends Plugin {\n\tname = 'SwupPreloadPlugin';\n\n\trequires = { swup: '>=4' };\n\n\tdefaults: PluginOptions = {\n\t\tthrottle: 5,\n\t\tpreloadInitialPage: true,\n\t\tpreloadHoveredLinks: true,\n\t\tpreloadVisibleLinks: {\n\t\t\tenabled: false,\n\t\t\tthreshold: 0.2,\n\t\t\tdelay: 500,\n\t\t\tcontainers: ['body'],\n\t\t\tignore: () => false\n\t\t}\n\t};\n\n\toptions: PluginOptions;\n\n\tprotected queue: Queue;\n\tprotected preloadObserver?: Observer;\n\tprotected preloadPromises = new Map<string, Promise<PageData | void>>();\n\n\tprotected mouseEnterDelegate?: DelegateEventUnsubscribe;\n\tprotected touchStartDelegate?: DelegateEventUnsubscribe;\n\tprotected focusDelegate?: DelegateEventUnsubscribe;\n\n\tconstructor(options: Partial<PluginInitOptions> = {}) {\n\t\tsuper();\n\n\t\t// Set all options except `preloadVisibleLinks` which is sanitized below\n\t\tconst { preloadVisibleLinks, ...otherOptions } = options;\n\t\tthis.options = { ...this.defaults, ...otherOptions };\n\n\t\t// Sanitize/merge `preloadVisibleLinks`` option\n\t\tif (typeof preloadVisibleLinks === 'object') {\n\t\t\tthis.options.preloadVisibleLinks = {\n\t\t\t\t...this.options.preloadVisibleLinks,\n\t\t\t\tenabled: true,\n\t\t\t\t...preloadVisibleLinks\n\t\t\t};\n\t\t} else {\n\t\t\tthis.options.preloadVisibleLinks.enabled = Boolean(preloadVisibleLinks);\n\t\t}\n\n\t\t// Bind public methods\n\t\tthis.preload = this.preload.bind(this);\n\n\t\t// Create global priority queue\n\t\tthis.queue = createQueue(this.options.throttle);\n\t}\n\n\tmount() {\n\t\tconst swup = this.swup;\n\n\t\tif (!swup.options.cache) {\n\t\t\tconsole.warn('SwupPreloadPlugin: swup cache needs to be enabled for preloading');\n\t\t\treturn;\n\t\t}\n\n\t\tswup.hooks.create('page:preload');\n\t\tswup.hooks.create('link:hover');\n\n\t\t// @ts-ignore: non-matching signatures (TODO: fix properly)\n\t\tswup.preload = this.preload;\n\t\tswup.preloadLinks = this.preloadLinks;\n\n\t\t// Inject custom promise whenever a page is loaded\n\t\tthis.replace('page:load', this.onPageLoad);\n\n\t\t// Preload links with [data-swup-preload] attr\n\t\tthis.preloadLinks();\n\t\tthis.on('page:view', () => this.preloadLinks());\n\n\t\t// Preload visible links in viewport\n\t\tif (this.options.preloadVisibleLinks.enabled) {\n\t\t\tthis.preloadVisibleLinks();\n\t\t\tthis.on('page:view', () => this.preloadVisibleLinks());\n\t\t}\n\n\t\t// Preload links on attention\n\t\tif (this.options.preloadHoveredLinks) {\n\t\t\tthis.preloadLinksOnAttention();\n\t\t}\n\n\t\t// Cache unmodified DOM of initial/current page\n\t\tif (this.options.preloadInitialPage) {\n\t\t\tthis.preload(getCurrentUrl());\n\t\t}\n\t}\n\n\tunmount() {\n\t\tthis.swup.preload = undefined;\n\t\tthis.swup.preloadLinks = undefined;\n\n\t\tthis.preloadPromises.clear();\n\n\t\tthis.mouseEnterDelegate?.destroy();\n\t\tthis.touchStartDelegate?.destroy();\n\t\tthis.focusDelegate?.destroy();\n\n\t\tthis.stopPreloadingVisibleLinks();\n\t}\n\n\t/**\n\t * Before core page load: return existing preload promise if available.\n\t */\n\tprotected onPageLoad: HookDefaultHandler<'page:load'> = (visit, args, defaultHandler) => {\n\t\tconst { url } = visit.to;\n\t\tif (url && this.preloadPromises.has(url)) {\n\t\t\treturn this.preloadPromises.get(url) as Promise<PageData>;\n\t\t}\n\t\treturn defaultHandler!(visit, args);\n\t};\n\n\t/**\n\t * When hovering over a link: preload the linked page with high priority.\n\t */\n\tprotected onMouseEnter: DelegateEventHandler = async (event) => {\n\t\t// Make sure mouseenter is only fired once even on links with nested html\n\t\tif (event.target !== event.delegateTarget) return;\n\n\t\t// Return early on devices that don't support hover\n\t\tif (!deviceSupportsHover()) return;\n\n\t\tconst el = event.delegateTarget;\n\t\tif (!(el instanceof HTMLAnchorElement)) return;\n\n\t\tthis.swup.hooks.callSync('link:hover', { el, event });\n\t\tthis.preload(el, { priority: true });\n\t};\n\n\t/**\n\t * When touching a link: preload the linked page with high priority.\n\t */\n\tprotected onTouchStart: DelegateEventHandler = (event) => {\n\t\t// Return early on devices that support hover\n\t\tif (deviceSupportsHover()) return;\n\n\t\tconst el = event.delegateTarget;\n\t\tif (!(el instanceof HTMLAnchorElement)) return;\n\n\t\tthis.preload(el, { priority: true });\n\t};\n\n\t/**\n\t * When focussing a link: preload the linked page with high priority.\n\t */\n\tprotected onFocus: DelegateEventHandler = (event) => {\n\t\tconst el = event.delegateTarget;\n\t\tif (!(el instanceof HTMLAnchorElement)) return;\n\n\t\tthis.preload(el, { priority: true });\n\t};\n\n\t/**\n\t * Preload links.\n\t *\n\t * The method accepts either:\n\t * - a URL or an array of URLs\n\t * - a link element or an array of link elements\n\t *\n\t * It returns either:\n\t * - a Promise resolving to the page data, if requesting a single page\n\t * - a Promise resolving to an array of page data, if requesting multiple pages\n\t */\n\tasync preload(url: string, options?: PreloadOptions): Promise<PageData | void>;\n\tasync preload(urls: string[], options?: PreloadOptions): Promise<(PageData | void)[]>;\n\tasync preload(el: HTMLAnchorElement, options?: PreloadOptions): Promise<PageData | void>;\n\tasync preload(els: HTMLAnchorElement[], options?: PreloadOptions): Promise<(PageData | void)[]>;\n\tasync preload(\n\t\tinput: string | HTMLAnchorElement,\n\t\toptions?: PreloadOptions\n\t): Promise<PageData | void>;\n\tasync preload(\n\t\tinput: string | string[] | HTMLAnchorElement | HTMLAnchorElement[],\n\t\toptions: PreloadOptions = {}\n\t): Promise<PageData | (PageData | void)[] | void> {\n\t\tlet url: string;\n\t\tlet el: HTMLAnchorElement | undefined;\n\t\tconst priority = options.priority ?? false;\n\n\t\t// Allow passing in array of urls or elements\n\t\tif (Array.isArray(input)) {\n\t\t\treturn Promise.all(input.map((link) => this.preload(link)));\n\t\t}\n\t\t// Allow passing in an anchor element\n\t\telse if (input instanceof HTMLAnchorElement) {\n\t\t\tel = input;\n\t\t\t({ url } = Location.fromElement(input));\n\t\t}\n\t\t// Allow passing in a url\n\t\telse if (typeof input === 'string') {\n\t\t\turl = input;\n\t\t}\n\t\t// Disallow other types\n\t\telse {\n\t\t\treturn;\n\t\t}\n\n\t\t// Already preloading? Return existing promise\n\t\tif (this.preloadPromises.has(url)) {\n\t\t\treturn this.preloadPromises.get(url);\n\t\t}\n\n\t\t// Should we preload?\n\t\tif (!this.shouldPreload(url, { el })) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Queue the preload with either low or high priority\n\t\t// The actual preload will happen when a spot in the queue is available\n\t\tconst queuedPromise = new Promise<PageData | void>((resolve) => {\n\t\t\tthis.queue.add(() => {\n\t\t\t\tthis.performPreload(url)\n\t\t\t\t\t.catch(() => {})\n\t\t\t\t\t.then((page) => resolve(page))\n\t\t\t\t\t.finally(() => {\n\t\t\t\t\t\tthis.queue.next();\n\t\t\t\t\t\tthis.preloadPromises.delete(url);\n\t\t\t\t\t});\n\t\t\t}, priority);\n\t\t});\n\n\t\tthis.preloadPromises.set(url, queuedPromise);\n\n\t\treturn queuedPromise;\n\t}\n\n\t/**\n\t * Preload any links on the current page manually marked for preloading.\n\t *\n\t * Links are marked for preloading by:\n\t * - adding a `data-swup-preload` attribute to the link itself\n\t * - adding a `data-swup-preload-all` attribute to a container of multiple links\n\t */\n\tpreloadLinks(): void {\n\t\twhenIdle(() => {\n\t\t\tconst selector = 'a[data-swup-preload], [data-swup-preload-all] a';\n\t\t\tconst links = Array.from(document.querySelectorAll<HTMLAnchorElement>(selector));\n\t\t\tlinks.forEach((el) => this.preload(el));\n\t\t});\n\t}\n\n\t/**\n\t * Register handlers for preloading on attention:\n\t *  - mouseenter\n\t *  - touchstart\n\t *  - focus\n\t */\n\tprotected preloadLinksOnAttention() {\n\t\tconst { swup } = this;\n\n\t\tconst { linkSelector: selector } = swup.options;\n\t\tconst opts = { passive: true, capture: true };\n\t\tthis.mouseEnterDelegate = swup.delegateEvent(\n\t\t\tselector,\n\t\t\t'mouseenter',\n\t\t\tthis.onMouseEnter,\n\t\t\topts\n\t\t);\n\t\tthis.touchStartDelegate = swup.delegateEvent(\n\t\t\tselector,\n\t\t\t'touchstart',\n\t\t\tthis.onTouchStart,\n\t\t\topts\n\t\t);\n\t\tthis.focusDelegate = swup.delegateEvent(selector, 'focus', this.onFocus, opts);\n\t}\n\n\t/**\n\t * Start observing links in the viewport for preloading.\n\t * Calling this repeatedly re-checks for links after DOM updates.\n\t */\n\tprotected preloadVisibleLinks(): void {\n\t\t// Scan DOM for new links on repeated calls\n\t\tif (this.preloadObserver) {\n\t\t\tthis.preloadObserver.update();\n\t\t\treturn;\n\t\t}\n\n\t\tconst { threshold, delay, containers } = this.options.preloadVisibleLinks;\n\t\tconst callback = (el: HTMLAnchorElement) => this.preload(el);\n\t\tconst filter = (el: HTMLAnchorElement) => {\n\t\t\t/** First, run the custom callback */\n\t\t\tif (this.options.preloadVisibleLinks.ignore(el)) return false;\n\t\t\t/** Second, run all default checks */\n\t\t\treturn this.shouldPreload(el.href, { el });\n\t\t};\n\t\tthis.preloadObserver = createObserver({ threshold, delay, containers, callback, filter });\n\t\tthis.preloadObserver.start();\n\t}\n\n\t/**\n\t * Stop observing links in the viewport for preloading.\n\t */\n\tprotected stopPreloadingVisibleLinks(): void {\n\t\tif (this.preloadObserver) {\n\t\t\tthis.preloadObserver.stop();\n\t\t}\n\t}\n\n\t/**\n\t * Check whether a URL and/or element should trigger a preload.\n\t */\n\tprotected shouldPreload(location: string, { el }: { el?: HTMLAnchorElement } = {}): boolean {\n\t\tconst { url, href } = Location.fromUrl(location);\n\n\t\t// Network too slow?\n\t\tif (!networkSupportsPreloading()) return false;\n\t\t// Already in cache?\n\t\tif (this.swup.cache.has(url)) return false;\n\t\t// Already preloading?\n\t\tif (this.preloadPromises.has(url)) return false;\n\t\t// Should be ignored anyway?\n\t\tif (this.swup.shouldIgnoreVisit(href, { el })) return false;\n\t\t// Special condition for links: points to current page?\n\t\tif (el && this.swup.resolveUrl(url) === this.swup.resolveUrl(getCurrentUrl())) return false;\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Perform the actual preload fetch and trigger the preload hook.\n\t */\n\tprotected async performPreload(url: string): Promise<PageData> {\n\t\tconst page = await this.swup.fetchPage(url);\n\t\tawait this.swup.hooks.call('page:preload', { page });\n\t\treturn page;\n\t}\n}\n","type QueueFunction = {\n\t(): void;\n\t__queued?: boolean;\n};\n\nexport type Queue = {\n\tadd: (fn: QueueFunction, highPriority?: boolean) => void;\n\tnext: () => void;\n};\n\nexport default function createQueue(limit: number = 1): Queue {\n\tconst qlow: QueueFunction[] = [];\n\tconst qhigh: QueueFunction[] = [];\n\tlet total = 0;\n\tlet running = 0;\n\n\tfunction add(fn: QueueFunction, highPriority: boolean = false): void {\n\t\t// Already added before?\n\t\tif (fn.__queued) {\n\t\t\t// Move from low to high-priority queue\n\t\t\tif (highPriority) {\n\t\t\t\tconst idx = qlow.indexOf(fn);\n\t\t\t\tif (idx >= 0) {\n\t\t\t\t\tconst removed = qlow.splice(idx, 1);\n\t\t\t\t\ttotal = total - removed.length;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\t// Mark as processed\n\t\tfn.__queued = true;\n\t\t// Push to queue: high or low\n\t\t(highPriority ? qhigh : qlow).push(fn);\n\t\t// Increment total\n\t\ttotal++;\n\t\t// Initialize queue if first item\n\t\tif (total <= 1) {\n\t\t\trun();\n\t\t}\n\t}\n\n\tfunction next(): void {\n\t\trunning--; // make room for next\n\t\trun();\n\t}\n\n\tfunction run(): void {\n\t\tif (running < limit && total > 0) {\n\t\t\tconst fn = qhigh.shift() || qlow.shift() || (() => {});\n\t\t\tfn();\n\t\t\ttotal--;\n\t\t\trunning++; // is now WIP\n\t\t}\n\t}\n\n\treturn { add, next };\n}\n","import { whenIdle } from './util.js';\n\nexport type Observer = {\n\tstart: () => void;\n\tstop: () => void;\n\tupdate: () => void;\n};\n\nexport default function createObserver({\n\tthreshold,\n\tdelay,\n\tcontainers,\n\tcallback,\n\tfilter\n}: {\n\tthreshold: number;\n\tdelay: number;\n\tcontainers: string[];\n\tcallback: (el: HTMLAnchorElement) => void;\n\tfilter: (el: HTMLAnchorElement) => boolean;\n}): Observer {\n\tconst visibleLinks = new Map<string, Set<HTMLAnchorElement>>();\n\n\t// Create an observer to add/remove links when they enter the viewport\n\tconst observer = new IntersectionObserver(\n\t\t(entries) => {\n\t\t\tentries.forEach((entry) => {\n\t\t\t\tif (entry.isIntersecting) {\n\t\t\t\t\tadd(entry.target as HTMLAnchorElement);\n\t\t\t\t} else {\n\t\t\t\t\tremove(entry.target as HTMLAnchorElement);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\t{ threshold }\n\t);\n\n\t// Preload link if it is still visible after a configurable timeout\n\tconst add = (el: HTMLAnchorElement) => {\n\t\tconst elements = visibleLinks.get(el.href) ?? new Set();\n\t\tvisibleLinks.set(el.href, elements);\n\t\telements.add(el);\n\n\t\tsetTimeout(() => {\n\t\t\tconst elements = visibleLinks.get(el.href);\n\t\t\tif (elements?.size) {\n\t\t\t\tcallback(el);\n\t\t\t\tobserver.unobserve(el);\n\t\t\t\telements.delete(el);\n\t\t\t}\n\t\t}, delay);\n\t};\n\n\t// Remove link from list of visible links\n\tconst remove = (el: HTMLAnchorElement) => visibleLinks.get(el.href)?.delete(el);\n\n\t// Clear list of visible links\n\tconst clear = () => visibleLinks.clear();\n\n\t// Scan DOM for preloadable links and start observing their visibility\n\tconst observe = () => {\n\t\twhenIdle(() => {\n\t\t\tconst selector = containers.map((root) => `${root} a[href]`).join(', ');\n\t\t\tconst links = Array.from(document.querySelectorAll<HTMLAnchorElement>(selector));\n\t\t\tlinks.filter((el) => filter(el)).forEach((el) => observer.observe(el));\n\t\t});\n\t};\n\n\treturn {\n\t\tstart: () => observe(),\n\t\tstop: () => observer.disconnect(),\n\t\tupdate: () => (clear(), observe())\n\t};\n}\n"],"names":["deviceSupportsHover","window","matchMedia","matches","whenIdle","requestIdleCallback","cb","setTimeout","_excluded","SwupPreloadPlugin","Plugin","constructor","options","_this","super","this","name","requires","swup","defaults","throttle","preloadInitialPage","preloadHoveredLinks","preloadVisibleLinks","enabled","threshold","delay","containers","ignore","queue","preloadObserver","preloadPromises","Map","mouseEnterDelegate","touchStartDelegate","focusDelegate","onPageLoad","visit","args","defaultHandler","url","to","has","get","onMouseEnter","async","event","target","delegateTarget","el","HTMLAnchorElement","hooks","callSync","preload","priority","onTouchStart","onFocus","otherOptions","_objectWithoutPropertiesLoose","_extends","Boolean","bind","limit","qlow","qhigh","total","running","run","shift","add","fn","highPriority","__queued","idx","indexOf","removed","splice","length","push","next","createQueue","mount","cache","create","preloadLinks","replace","on","preloadLinksOnAttention","getCurrentUrl","console","warn","unmount","_this$mouseEnterDeleg","_this$touchStartDeleg","_this$focusDelegate","undefined","clear","destroy","stopPreloadingVisibleLinks","input","_options$priority","Array","isArray","Promise","all","map","link","Location","fromElement","shouldPreload","queuedPromise","resolve","performPreload","catch","then","page","finally","delete","set","from","document","querySelectorAll","forEach","linkSelector","selector","opts","passive","capture","delegateEvent","update","callback","filter","visibleLinks","observer","IntersectionObserver","entries","entry","isIntersecting","remove","_visibleLinks$get","elements","href","Set","size","unobserve","_visibleLinks$get2","observe","root","join","start","stop","disconnect","createObserver","location","fromUrl","navigator","connection","_navigator$connection","saveData","effectiveType","endsWith","networkSupportsPreloading","shouldIgnoreVisit","resolveUrl","fetchPage","call"],"mappings":"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"}